{"version":3,"sources":["styles/CourseListing.module.css","styles/Mainmenu.module.css","styles/Scorecards.module.css","styles/Scorecard.module.css","functions.js","components/Scorecard.js","components/Scorecards.js","components/NewCourse.js","services/courses.js","components/CourseListing.js","components/Gameplay.js","services/rounds.js","components/Mainmenu.js","services/users.js","components/Login.js","services/login.js","App.js","index.js","styles/NewCourse.module.css","styles/Gameplay.module.css","styles/Login.module.css"],"names":["module","exports","formalizeRelativeScore","score","functions","countRelativeScore","playerScore","coursePars","reduce","a","b","index","par","countTotalScore","countFormalRelativeScore","countPar","scorecard","totalPar","map","course","pars","Scorecard","className","styles","s","i","scorecardRow","Scorecards","enter","rounds","useState","sortedRounds","setSortedRounds","isSortedByDate","setIsSortedByDate","handleClickRound","r","useEffect","sortByDate","sort","dateA","date","dateB","formaliziteDate","dateToFormalizite","dateAndTime","split","time","h","parseInt","m","sortButton","onClick","nameA","name","toUpperCase","nameB","sortByCourse","scorecardListingDiv","player","_id","NewCourse","addCourse","editCourse","courseLength","setCourseLength","courseName","setCourseName","holePars","setHolePars","p","length","handleLengthChange","newLength","newPars","push","splice","handleParChange","hole","change","NewCourseInfo","htmlFor","type","id","value","onChange","target","courseLengthInfo","changeLengthButtons","holeList","holeInfo","holePar","changeParButtons","saveNewCourse","baseUrl","courses","getAll","axios","get","then","response","data","create","post","update","put","CourseListing","enterNewGame","setCourses","selectedCourse","setSelectedCourse","coursesService","handleAddNewCourse","newCourse","concat","document","getElementsByClassName","click","handleEditCourse","editedCourse","Object","assign","c","NewGame","courseListingDiv","style","backgroundColor","handleCourseClick","startNewGameButton","localStorage","setItem","JSON","stringify","Date","addNewCourseButton","Gameplay","saveScore","currentHole","setCurrentHole","setPlayerScore","setCourse","currentCourse","parse","getItem","currentScore","savedHole","changeScore","newScore","strokes","gamePlayDiv","finishRound","holeScoreDiv","currentHoleScore","holeInformationDiv","holeDiv","selectedHole","getToken","headers","Authorization","token","round","Mainmenu","loggedUser","logout","setRounds","roundsService","componentToRender","setComponentToRender","exit","newComponentToRender","slice","pushToComponents","newComponent","components","newRound","removeItem","handleNewGame","window","confirm","subMenuDiv","height","mainMenuButtons","users","Login","login","username","setUsername","password","setPassword","confirmPassword","setConfirmPassword","createNewAccountForm","setCreateNewAccountForm","notification","setNotification","notificationStyle","setNotificationStyle","input","inputStyle","setInputStyle","error","e","inputError","setTimeout","handleLogin","event","preventDefault","handleShowCreateAccount","show","handleCreateAccount","userServices","form","onSubmit","placeholder","formButton","cancelButton","loginService","credentials","App","setLoggedUser","userInfo","user","clear","appContent","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.cb4ef987.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Courses\":\"CourseListing_Courses__1n1D4\",\"NewGame\":\"CourseListing_NewGame__1aL3P\",\"courseListingDiv\":\"CourseListing_courseListingDiv__3ASSa\",\"course\":\"CourseListing_course__16W8f\",\"startNewGameButton\":\"CourseListing_startNewGameButton__EkL4m\",\"addNewCourseButton\":\"CourseListing_addNewCourseButton__2qNWy\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Mainmenu\":\"Mainmenu_Mainmenu__2y-Df\",\"mainMenuButtons\":\"Mainmenu_mainMenuButtons__32EWS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Scorecards\":\"Scorecards_Scorecards__3j-IK\",\"scorecardListingDiv\":\"Scorecards_scorecardListingDiv__20OhY\",\"sortButton\":\"Scorecards_sortButton__pLwYw\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"scorecard\":\"Scorecard_scorecard__PwugC\",\"scorecardRow\":\"Scorecard_scorecardRow__1jVtg\"};","// Lasketaan suhteellinen tulos pelatuille väylille\r\nconst countRelativeScore = (playerScore, coursePars) => {\r\n    return playerScore.reduce((a, b, index) => {\r\n        if (!b) return a\r\n        return a + b - coursePars[index].par\r\n    }, 0)\r\n}\r\n\r\n// Lasketaan suhteellinen tulos pelatuille väylille nätissä muodossa\r\nconst countFormalRelativeScore = (playerScore, coursePars) => {\r\n    return formalizeRelativeScore(\r\n        playerScore.reduce((a, b, index) => {\r\n            if (!b) return a\r\n            return a + b - coursePars[index].par\r\n        }, 0)\r\n    )\r\n}\r\n\r\n// Muuta nätimpään muotoon suhteellinen tulos\r\nconst formalizeRelativeScore = score => {\r\n    /* Jos tulos on tasan par:issa näytetään E, muutoin etumerkin kanssa luku itse */\r\n    if (score === 0) return 'E'\r\n    if (score > 0) return '+' + score\r\n    return score\r\n}\r\n\r\n// Lasketaan pelattujen väylien lyönnit yhteen\r\nconst countTotalScore = playerScore => {\r\n    return playerScore.reduce((a, b) => {\r\n        if (!b) return a\r\n        return a + b\r\n    }, 0)\r\n}\r\n\r\n// par \"keskeneräiselle\" kierrokselle\r\nconst countPar = scorecard => {\r\n    var totalPar = 0\r\n    scorecard.score.map((score, index) => {\r\n        if (score === null) return totalPar\r\n        return (totalPar += scorecard.course.pars[index].par)\r\n    })\r\n    return totalPar\r\n}\r\n\r\nconst functions = {\r\n    countRelativeScore,\r\n    formalizeRelativeScore,\r\n    countTotalScore,\r\n    countFormalRelativeScore,\r\n    countPar,\r\n}\r\nexport default functions\r\n","/* Näyttää yhden pelatun kierroksen tiedot */\r\nimport styles from '../styles/Scorecard.module.css'\r\nimport functions /* { countTotalScore, countFormalRelativeScore } */ from '../functions.js'\r\nconst Scorecard = ({ scorecard }) => {\r\n    return scorecard ? (\r\n        <div className={styles.scorecard}>\r\n            <h2>Scorecard</h2>\r\n            <div>\r\n                <table>\r\n                    <thead>\r\n                        <tr>\r\n                            <th>Hole</th>\r\n                            <th>Par</th>\r\n                            <th>Strokes</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {scorecard.score.map((s, i) => (\r\n                            <tr className={styles.scorecardRow} key={i}>\r\n                                <td>{i + 1}</td>\r\n                                <td>{scorecard.course.pars[i].par}</td>\r\n                                <td>{s ? s : '-'}</td>\r\n                            </tr>\r\n                        ))}\r\n                        <tr className={styles.scorecardRow} key='total'>\r\n                            <td>\r\n                                <b>total</b>\r\n                            </td>\r\n                            <td>{functions.countPar(scorecard)}</td>\r\n                            <td>\r\n                                {functions.countTotalScore(scorecard.score)} (\r\n                                {functions.countFormalRelativeScore(\r\n                                    scorecard.score,\r\n                                    scorecard.course.pars\r\n                                )}\r\n                                )\r\n                            </td>\r\n                        </tr>\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n        </div>\r\n    ) : null\r\n}\r\n\r\nexport default Scorecard\r\n","/* Luo listauksen pelaajan pelaamista kierroksista */\r\nimport Scorecard from './Scorecard'\r\nimport { useEffect, useState } from 'react'\r\nimport styles from '../styles/Scorecards.module.css'\r\nconst Scorecards = ({ enter, rounds }) => {\r\n    const [sortedRounds, setSortedRounds] = useState([])\r\n    const [isSortedByDate, setIsSortedByDate] = useState(true)\r\n    const handleClickRound = async r => {\r\n        enter(<Scorecard scorecard={r}></Scorecard>)\r\n    }\r\n\r\n    // Oletuksena kierrokset lajitellaan radan mukaan\r\n    useEffect(() => {\r\n        setSortedRounds(sortByDate(rounds))\r\n    }, [rounds])\r\n\r\n    // palauttaa kierrokset lajiteltuna radan mukaan\r\n    const sortByCourse = rounds => {\r\n        const roundsToSort = [...rounds]\r\n        return roundsToSort.sort((a, b) => {\r\n            var nameA = a.course.name.toUpperCase()\r\n            var nameB = b.course.name.toUpperCase()\r\n            if (nameA < nameB) {\r\n                return -1\r\n            }\r\n            if (nameA > nameB) {\r\n                return 1\r\n            }\r\n            return 0\r\n        })\r\n    }\r\n\r\n    // palauttaa kierrokset lajiteltuna päivämäärän mukaan\r\n    const sortByDate = rounds => {\r\n        const roundsToSort = [...rounds]\r\n        return roundsToSort.sort((a, b) => {\r\n            var dateA = a.date\r\n            var dateB = b.date\r\n            if (dateA < dateB) {\r\n                return 1\r\n            }\r\n            if (dateA > dateB) {\r\n                return -1\r\n            }\r\n            return 0\r\n        })\r\n    }\r\n\r\n    const formaliziteDate = dateToFormalizite => {\r\n        const dateAndTime = dateToFormalizite.split('T')\r\n        const date = dateAndTime[0].split('-')\r\n        const time = dateAndTime[1].split('.')[0].split(':')\r\n        const h = parseInt(time[0], 0) + 3\r\n        const m = time[1]\r\n        const s = time[2]\r\n        return (\r\n            date[2] +\r\n            '/' +\r\n            date[1] +\r\n            '/' +\r\n            date[0] +\r\n            ' ' +\r\n            h +\r\n            ':' +\r\n            m +\r\n            ':' +\r\n            s\r\n        )\r\n    }\r\n    return (\r\n        <div className={styles.Scorecards}>\r\n            {isSortedByDate ? (\r\n                <button\r\n                    className={styles.sortButton}\r\n                    onClick={() => {\r\n                        setSortedRounds(sortByDate(rounds))\r\n                        setIsSortedByDate(!isSortedByDate)\r\n                    }}\r\n                >\r\n                    Sort by date\r\n                </button>\r\n            ) : (\r\n                <button\r\n                    className={styles.sortButton}\r\n                    onClick={() => {\r\n                        setSortedRounds(sortByCourse(rounds))\r\n                        setIsSortedByDate(!isSortedByDate)\r\n                    }}\r\n                >\r\n                    Sort by course\r\n                </button>\r\n            )}\r\n            <h1>Scorecards</h1>\r\n            <div className={styles.scorecardListingDiv}>\r\n                {sortedRounds.map(r => (\r\n                    <div\r\n                        key={r.date + r.player._id}\r\n                        onClick={() => handleClickRound(r)}\r\n                    >\r\n                        {r.course.name}\r\n                        <br></br>\r\n                        {formaliziteDate(r.date)}\r\n                    </div>\r\n                ))}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Scorecards\r\n","/* Radan lisäämislomake */\r\nimport { useEffect, useState } from 'react'\r\nimport styles from '../styles/NewCourse.module.css'\r\n\r\n/* addCourse aliohjleman avulla lisätään rata */\r\nconst NewCourse = ({ addCourse, name, pars, editCourse }) => {\r\n    // Radan pituus\r\n    const [courseLength, setCourseLength] = useState(18)\r\n    // radan nimi\r\n    const [courseName, setCourseName] = useState('')\r\n    // Radan par:it, oletuksena 3\r\n    const [holePars, setHolePars] = useState([\r\n        3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\r\n    ])\r\n    useEffect(() => {\r\n        // jos on annettu name, ollaan muokkaamassa rataa eikä luomassa uutta\r\n        if (name) {\r\n            setCourseName(name)\r\n            if (pars) {\r\n                setHolePars(pars.map(p => p.par))\r\n            }\r\n            setCourseLength(pars.length)\r\n        }\r\n    }, [pars, name])\r\n    // Muuttaessa radan pituutta, muuttuvat par:it\r\n    const handleLengthChange = newLength => {\r\n        if (newLength <= 0) return\r\n        if (newLength > courseLength) {\r\n            // Jos väyliä lisätään lisätään yhtä monta par:ia\r\n            const newPars = [...holePars]\r\n            for (var i = 0; i < newLength - courseLength; i++) {\r\n                newPars.push(3)\r\n            }\r\n            setHolePars(newPars)\r\n        } else {\r\n            // muutoin vähennettään par:eja yhtä moneen kuin väyliä on jäljellä\r\n            setHolePars(holePars.splice(0, newLength))\r\n        }\r\n        setCourseLength(newLength)\r\n    }\r\n\r\n    // Annetun väylän paria muutetaan\r\n    const handleParChange = (hole, change) => {\r\n        const newPars = holePars.map((p, i) =>\r\n            i + 1 === hole && p + change > 0 ? p + change : p\r\n        )\r\n        setHolePars(newPars)\r\n    }\r\n\r\n    // Tallennettaan annetut tiedot\r\n    const saveCourse = () => {\r\n        // Jos on on annettu nimi, ollaan muokkaamassa olemassa olevaa\r\n        if (!name) {\r\n            addCourse({\r\n                pars: holePars.map(p => {\r\n                    return { par: p }\r\n                }),\r\n                name: courseName,\r\n            })\r\n        } else {\r\n            editCourse({\r\n                pars: holePars.map(p => {\r\n                    return { par: p }\r\n                }),\r\n                name: courseName,\r\n            })\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={styles.NewCourse}>\r\n            <div className={styles.NewCourseInfo}>\r\n                <form>\r\n                    <label htmlFor='coursename'>Name</label>\r\n                    <input\r\n                        type='text'\r\n                        id='coursename'\r\n                        name='coursename'\r\n                        value={courseName}\r\n                        onChange={({ target }) => setCourseName(target.value)}\r\n                    ></input>\r\n                </form>\r\n\r\n                <div className={styles.courseLengthInfo}>\r\n                    <div>Number of holes: {courseLength}</div>\r\n                    <div className={styles.changeLengthButtons}>\r\n                        <button\r\n                            onClick={() => {\r\n                                handleLengthChange(18)\r\n                            }}\r\n                        >\r\n                            18\r\n                        </button>\r\n                        <button\r\n                            onClick={() => {\r\n                                handleLengthChange(9)\r\n                            }}\r\n                        >\r\n                            9\r\n                        </button>\r\n                        <button\r\n                            onClick={() => {\r\n                                handleLengthChange(courseLength - 1)\r\n                            }}\r\n                        >\r\n                            -\r\n                        </button>\r\n\r\n                        <button\r\n                            onClick={() => {\r\n                                handleLengthChange(courseLength + 1)\r\n                            }}\r\n                        >\r\n                            +\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n\r\n                <div className={styles.holeList}>\r\n                    {holePars.map((h, i) => {\r\n                        return (\r\n                            <div key={i} className={styles.holeInfo}>\r\n                                <div>Hole {1 + i} Par:</div>\r\n                                <div className={styles.holePar}>{h}</div>\r\n                                <div className={styles.changeParButtons}>\r\n                                    <button\r\n                                        onClick={() => {\r\n                                            handleParChange(1 + i, -1)\r\n                                        }}\r\n                                    >\r\n                                        -\r\n                                    </button>\r\n                                    <button\r\n                                        onClick={() => {\r\n                                            handleParChange(1 + i, 1)\r\n                                        }}\r\n                                    >\r\n                                        +\r\n                                    </button>\r\n                                </div>\r\n                            </div>\r\n                        )\r\n                    })}\r\n                </div>\r\n                <button className={styles.saveNewCourse} onClick={saveCourse}>\r\n                    Save\r\n                </button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default NewCourse\r\n","import axios from 'axios'\r\n\r\nconst baseUrl = '/api/courses/'\r\n\r\nconst getAll = () => {\r\n    const request = axios.get(baseUrl)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nconst get = id => {\r\n    const request = axios.get(`${baseUrl}/${id}`)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nconst create = course => {\r\n    const request = axios.post(baseUrl, course)\r\n    return request.then(response => response.data)\r\n}\r\nconst update = course => {\r\n    const request = axios.put(`${baseUrl}/${course._id}`, course)\r\n    return request.then(response => response.data)\r\n}\r\nconst courses = { getAll, create, get, update }\r\nexport default courses\r\n","/* Listaus radoista, ja mahdollisuus lisätä niitä käytetään pelkkään listaukseen ja myöhemmin muokkaamiseen\r\nsekä kierroksien aloittamiseen */\r\nimport { useEffect, useState } from 'react'\r\nimport NewCourse from './NewCourse' // NewCourse-komponentin avulla lisätään uusia ratoja ja muokataan vanhoja\r\nimport coursesService from '../services/courses' // courseservice hakee kaikki radat\r\nimport styles from '../styles/CourseListing.module.css' // Otetaan käyttöön tyyli tästä tiedostosta\r\n/* enterNewGame avulla siirryttään uuteen peliin, \r\njos enterNewGame on null, näytetään vain listausradoista ilman mahdollisuutta pelaamiseen\r\n\r\nenter avulla voidaan määrätä näytettäväksi radan lisäämislomake tai pelikierrostilanne\r\n*/\r\nconst CourseListing = ({ enterNewGame, enter }) => {\r\n    // Radat listattuna\r\n    const [courses, setCourses] = useState([])\r\n    // käyttäjän täytyy valita, jokin rata ja sitten hyväksyä valinta, oletuksena ei mikään valittuna\r\n    const [selectedCourse, setSelectedCourse] = useState(null)\r\n    // Aluksi haetaan kaikki radat\r\n    useEffect(() => {\r\n        coursesService.getAll().then(courses =>\r\n            setCourses(\r\n                courses.sort((a, b) => {\r\n                    var nameA = a.name.toUpperCase()\r\n                    var nameB = b.name.toUpperCase()\r\n                    if (nameA < nameB) {\r\n                        return -1\r\n                    }\r\n                    if (nameA > nameB) {\r\n                        return 1\r\n                    }\r\n                    return 0\r\n                })\r\n            )\r\n        )\r\n    }, [])\r\n\r\n    // radan-lisäyksen klikkaamisen jälkeen näytetään lisäyslomake\r\n    const handleClickAddNewCourse = () => {\r\n        enter(\r\n            <NewCourse\r\n                addCourse={course => handleAddNewCourse(course)}\r\n            ></NewCourse>\r\n        )\r\n    }\r\n\r\n    // radan-muokkauksen klikkaamisen jälkeen näytetään muokkaamislomake\r\n    const handleClickEditCourse = () => {\r\n        enter(\r\n            <NewCourse\r\n                editCourse={course => handleEditCourse(course)}\r\n                name={selectedCourse.name}\r\n                pars={selectedCourse.pars}\r\n            ></NewCourse>\r\n        )\r\n    }\r\n\r\n    // Klikatessa radan nimeä.\r\n    const handleCourseClick = c => {\r\n        setSelectedCourse(c)\r\n    }\r\n\r\n    // Pelin aloittaminen\r\n    const startGame = () => {\r\n        if (enterNewGame) {\r\n            // Pelin alkaessa laitetaan talteen aloitusajankohta...\r\n            localStorage.setItem('startingTime', JSON.stringify(new Date()))\r\n            // sekä rata, jolla pelataan\r\n            localStorage.setItem(\r\n                'currentCourse',\r\n                JSON.stringify(selectedCourse)\r\n            )\r\n            enterNewGame()\r\n        }\r\n    }\r\n\r\n    // lisätään uusi rata, ja piilotetaan lisäyslomake\r\n    const handleAddNewCourse = async course => {\r\n        const newCourse = await coursesService.create(course)\r\n        /* lisäys myös käyttliittymän listaan */\r\n        setCourses(\r\n            courses.concat(newCourse).sort((a, b) => {\r\n                var nameA = a.name.toUpperCase()\r\n                var nameB = b.name.toUpperCase()\r\n                if (nameA < nameB) {\r\n                    return -1\r\n                }\r\n                if (nameA > nameB) {\r\n                    return 1\r\n                }\r\n                return 0\r\n            })\r\n        )\r\n        // poistutaan lisäyksen jälkeen lomakkeelta toistaiseksi näin\r\n        document.getElementsByClassName('backButton')[0].click()\r\n    }\r\n    // muokataan rataa, ja piilotetaan muokkauss\r\n    const handleEditCourse = async course => {\r\n        const editedCourse = Object.assign({ _id: selectedCourse._id }, course)\r\n        const newCourse = await coursesService.update(editedCourse)\r\n        /* poistetaan käyttliittymästä vanha ja lisätään uusi */\r\n        setCourses(courses.map(c => (c._id === newCourse._id ? newCourse : c)))\r\n        // poistutaan muokkauksen jälkeen lomakkeelta toistaiseksi näin\r\n        document.getElementsByClassName('backButton')[0].click()\r\n    }\r\n\r\n    // palautetaan eri button riippuen siitä, ollaanko \"New Game\"-osassa,\r\n    // vai \"Courses\"-osassa. Toisessa voidaan aloittaa uusi peli ja toisessa muokata ratojas\r\n    const courseButtons = () => {\r\n        return enterNewGame ? (\r\n            <button\r\n                className={styles.startNewGameButton}\r\n                onClick={() => startGame()}\r\n            >\r\n                Start Game\r\n            </button>\r\n        ) : (\r\n            <button\r\n                className={styles.startNewGameButton}\r\n                onClick={() => handleClickEditCourse()}\r\n            >\r\n                Edit Course\r\n            </button>\r\n        )\r\n    }\r\n    return (\r\n        <div className={styles.NewGame}>\r\n            {\r\n                /* Otsikon valinta tilanteen mukaan */ enterNewGame ? (\r\n                    <h1>New Game</h1>\r\n                ) : (\r\n                    <h1>Courses</h1>\r\n                )\r\n            }\r\n            <div className={styles.courseListingDiv}>\r\n                {courses.map(c => (\r\n                    <div\r\n                        style={\r\n                            // Jos kyseinen rata on valittu rata, laitetaan taustaksi harmaampi\r\n                            selectedCourse\r\n                                ? c.name === selectedCourse.name\r\n                                    ? { backgroundColor: '#B6B6B6' }\r\n                                    : null\r\n                                : null\r\n                        }\r\n                        className={styles.course}\r\n                        key={c.name}\r\n                        onClick={() => {\r\n                            handleCourseClick(c)\r\n                        }}\r\n                    >\r\n                        <span>{c.name}</span>\r\n                    </div>\r\n                ))}\r\n            </div>\r\n\r\n            {selectedCourse ? courseButtons() : null}\r\n\r\n            <button\r\n                className={styles.addNewCourseButton}\r\n                onClick={() => handleClickAddNewCourse()}\r\n            >\r\n                Add New Course\r\n            </button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CourseListing\r\n","/* Gameplay-komponentti vastaa pelin aikaisesta pisteiden kirjanpidosta */\r\nimport { useState, useEffect } from 'react'\r\n\r\nimport styles from '../styles/Gameplay.module.css'\r\nimport functions from '../functions.js' // Muutama pisteiden laskuun liittyvä funktio on eristetty muualle\r\n/* \r\nsaveScore-funktion avulla tallennetaan käynnissä oleva kierros\r\n*/\r\nconst Gameplay = ({ saveScore }) => {\r\n    const [currentHole, setCurrentHole] = useState(1) // Pidetään tallessa millä väylällä ollaan\r\n    const [playerScore, setPlayerScore] = useState([]) // Pelaajan pisteet\r\n    const [course, setCourse] = useState(null) // rata, jolla ollaan\r\n\r\n    // Vain ekalla Gameplayn renderöinnillä\r\n    useEffect(() => {\r\n        // otetaan selaimen muistista valitturata\r\n        const currentCourse = JSON.parse(localStorage.getItem('currentCourse'))\r\n        setCourse(currentCourse)\r\n        // Selaimen muistista pisteet, jos esim ollaan poistuttu pelistä, ja palataan\r\n        const currentScore = JSON.parse(localStorage.getItem('currentScore'))\r\n        if (currentScore) {\r\n            // Jos kierrokselta on jo pisteet olemassa käytetään niitä\r\n            setPlayerScore(currentScore)\r\n            // Jos ollaan jo jollain väylällä jatketaan siitä, muutoin väylältä 1\r\n            const savedHole = parseInt(localStorage.getItem('currentHole'), 10)\r\n            savedHole ? setCurrentHole(savedHole) : setCurrentHole(1)\r\n            return\r\n        }\r\n        // Jos pisteitä ei ole asetetaan kaikille null\r\n        setPlayerScore(currentCourse.pars.map(() => null))\r\n    }, [])\r\n\r\n    // Aina pelajaan pisteiden päivittyessä\r\n    useEffect(() => {\r\n        // Päivitetään selaimen muistiin pisteet, jotta voidaan jatkaa vaikka poistuttaisiin\r\n        localStorage.setItem('currentScore', JSON.stringify(playerScore))\r\n    }, [playerScore])\r\n\r\n    /* Pelaajan väylän pisteiden muuttamiseen */\r\n    const handleIncreaseScore = () => {\r\n        changeScore(1)\r\n    }\r\n    const handleDecreaseScore = () => {\r\n        changeScore(-1)\r\n    }\r\n    const changeScore = change => {\r\n        // Jos uusi tulos on 0, poistutaan\r\n        if (playerScore[currentHole - 1] === 1 && change < 0) return\r\n        // Luodaan uusi pistetaulukko, map-funktiossa jos indeksi on sama kuin\r\n        // tämän hetkinen väylä, muutetaan sitä.\r\n        const newScore = playerScore.map((strokes, i) => {\r\n            if (i !== currentHole - 1) return strokes\r\n            // jos väylällä on olemassa tulos, muutetaan, muutoin asetetaan väylän tulokseksi par\r\n            return strokes ? strokes + change : course.pars[currentHole - 1].par\r\n        })\r\n        setPlayerScore(newScore)\r\n    }\r\n\r\n    // Kierroksen lopetus\r\n    const handleFinishRound = () => {\r\n        saveScore(course, playerScore)\r\n    }\r\n\r\n    return course ? (\r\n        <div className={styles.gamePlayDiv}>\r\n            <button className={styles.finishRound} onClick={handleFinishRound}>\r\n                finish round\r\n            </button>\r\n            <h2>{course.name}</h2>\r\n            <div className={styles.holeScoreDiv}>\r\n                <button onClick={handleDecreaseScore}>-</button>\r\n                <div className={styles.currentHoleScore}>\r\n                    {playerScore[currentHole - 1]\r\n                        ? playerScore[currentHole - 1]\r\n                        : '-'}\r\n                </div>\r\n                <button onClick={handleIncreaseScore}>+</button>\r\n            </div>\r\n            <div className={styles.holeInformationDiv}>\r\n                <div className={styles.holeDiv}>\r\n                    Hole: <span>{currentHole}</span>\r\n                </div>\r\n                <div>Par: {course.pars[currentHole - 1].par}</div>\r\n                <div>\r\n                    Score: {functions.countTotalScore(playerScore)} (\r\n                    {functions.countFormalRelativeScore(\r\n                        playerScore,\r\n                        course.pars\r\n                    )}\r\n                    )\r\n                </div>\r\n            </div>\r\n            <div className={styles.holeList}>\r\n                {course.pars.map((p, i) => {\r\n                    return (\r\n                        <div\r\n                            key={i}\r\n                            className={\r\n                                currentHole === i + 1 ? styles.selectedHole : ''\r\n                            }\r\n                            onClick={() => setCurrentHole(i + 1)}\r\n                        >\r\n                            <p>{i + 1}</p>\r\n                        </div>\r\n                    )\r\n                })}\r\n            </div>\r\n        </div>\r\n    ) : null\r\n}\r\n\r\nexport default Gameplay\r\n","import axios from 'axios'\r\n\r\nconst baseUrl = '/api/rounds/'\r\nconst getToken = () => {\r\n    return {\r\n        headers: {\r\n            Authorization: `bearer ${\r\n                JSON.parse(localStorage.getItem('loggedUser')).token\r\n            }`,\r\n        },\r\n    }\r\n}\r\n// Palauttaa id:tä vastaavaan käyttäjän kierrokset\r\nconst get = id => {\r\n    const request = axios.get(`${baseUrl}/user/${id}`, getToken())\r\n    return request.then(response => {\r\n        return response.data\r\n    })\r\n}\r\n\r\n/* const getAll = () => {\r\n    const request = axios.get(baseUrl)\r\n    return request.then(response => {\r\n        return response.data\r\n    })\r\n} */\r\n\r\nconst create = round => {\r\n    const request = axios.post(baseUrl, round, getToken())\r\n    return request.then(response => response.data)\r\n}\r\n\r\nconst rounds = { create, get }\r\nexport default rounds\r\n","/* Päävalikko, hoitaa eri alivalikoiden näyttämisen */\r\nimport Scorecards from './Scorecards'\r\nimport Scorecard from './Scorecard'\r\nimport CourseListing from './CourseListing'\r\nimport Gameplay from './Gameplay'\r\nimport { useState, useEffect } from 'react'\r\nimport roundsService from '../services/rounds'\r\nimport styles from '../styles/Mainmenu.module.css'\r\n\r\n// loggedUser on kirjautunut käyttäjä, logout avulla kirjataan ulos\r\nconst Mainmenu = ({ loggedUser, logout }) => {\r\n    // Kaikki kirjautuneen pelaajan pelatut kierrokset listassa\r\n    const [rounds, setRounds] = useState([])\r\n    // Kirjaantuneen käyttäjän vaihtuessa päivitetään kierrokset-lista\r\n    useEffect(() => {\r\n        roundsService.get(loggedUser._id).then(rounds => setRounds(rounds))\r\n    }, [loggedUser])\r\n\r\n    /* componentToRender:in viimeinen alkio on näytettävä komponentti\r\n    Jos se on null, näytettään main menu */\r\n    const [componentToRender, setComponentToRender] = useState(null)\r\n\r\n    // Poistutaan tämän hetkisestä näkymästä ja palataan \"edelliseen\"\r\n    const exit = () => {\r\n        // Jos pituus on enemmän kuin 1 joku muu kuin Main Menu on edellinen\r\n        if (componentToRender && componentToRender.length > 1) {\r\n            /* componentToRender.slice(0, -1) palauttaa componentToRender-taulukon ilman viimeistö alkiota */\r\n            const newComponentToRender = componentToRender.slice(0, -1)\r\n            setComponentToRender(newComponentToRender)\r\n            return\r\n        }\r\n        setComponentToRender(null)\r\n    }\r\n\r\n    // mennään \"syvemmälle\" valikoissa\r\n    const pushToComponents = (index, newComponent) => {\r\n        setComponentToRender([...components[index], newComponent])\r\n    }\r\n\r\n    // Tallenetaan annettujen tietojen perusteella scorecard\r\n    const saveScore = async (course, score) => {\r\n        const scorecard = {\r\n            date: JSON.parse(localStorage.getItem('startingTime')),\r\n            player: loggedUser._id,\r\n            course: course,\r\n            score: score,\r\n        }\r\n        const newRound = await roundsService.create(scorecard)\r\n        setRounds(rounds.concat(newRound))\r\n        /* scorecardin tallentamisen jälkeen poistutaan pelikierrosnäkymästä\r\n        eli palataan Main Menu näkymään */\r\n        exit()\r\n        /* Mutta asetetaan päälle pelikierroksen tietojen näyttäminen,\r\n        jotta \"palatessa\" mennään MainMenuun*/\r\n        setComponentToRender([<Scorecard scorecard={newRound}></Scorecard>])\r\n        /* Poistetaan käynnissä olleen kierroksen tiedot selaimen muistista */\r\n        localStorage.removeItem('currentCourse')\r\n        localStorage.removeItem('currentScore')\r\n        localStorage.removeItem('startingTime')\r\n        localStorage.removeItem('currentHole')\r\n    }\r\n\r\n    const handleResumeGame = () => {\r\n        /* Jos selaimen muistissa ei ole kierrosta, kysytään aloitetaanko uusi */\r\n        if (JSON.parse(localStorage.getItem('currentScore'))) {\r\n            setComponentToRender(components[3])\r\n            return\r\n        }\r\n\r\n        if (window.confirm('no current round, start new?')) {\r\n            handleNewGame()\r\n        }\r\n    }\r\n\r\n    const enterNewGame = () => {\r\n        setComponentToRender(components[3])\r\n    }\r\n\r\n    const handleNewGame = async () => {\r\n        /* Jos selaimen muistissa on kierros, varmistetaan halutaanko uusi aloittaa */\r\n        if (JSON.parse(localStorage.getItem('currentScore'))) {\r\n            if (window.confirm('Start new round? Current one will be saved.')) {\r\n                const scorecard = {\r\n                    date: JSON.parse(localStorage.getItem('startingTime')),\r\n                    player: loggedUser._id,\r\n                    course: JSON.parse(localStorage.getItem('currentCourse')),\r\n                    score: JSON.parse(localStorage.getItem('currentScore')),\r\n                }\r\n                const newRound = await roundsService.create(scorecard)\r\n                setRounds(rounds.concat(newRound))\r\n                localStorage.removeItem('currentScore')\r\n                localStorage.removeItem('currentCourse')\r\n                localStorage.removeItem('startingTime')\r\n                localStorage.removeItem('currentHole')\r\n                setComponentToRender(components[2])\r\n            }\r\n            return\r\n        }\r\n        setComponentToRender(components[2])\r\n    }\r\n\r\n    /* Lista listoista, jos yksikään listan komponenttilistoista\r\n    ei ole valittuna, renderöidään päävalikko. Jos jokin on valittuna\r\n    renderöidään kyseisen listan viimeinen alkio.    \r\n    */\r\n    const components = [\r\n        [\r\n            <div className={styles.subMenuDiv}>\r\n                <Scorecards\r\n                    rounds={rounds}\r\n                    enter={c => pushToComponents(0, c)}\r\n                ></Scorecards>\r\n            </div>,\r\n        ],\r\n        [\r\n            <div className={styles.subMenuDiv}>\r\n                <CourseListing\r\n                    enterNewGame={null}\r\n                    enter={c => pushToComponents(1, c)}\r\n                ></CourseListing>\r\n            </div>,\r\n        ],\r\n        [\r\n            <div className={styles.subMenuDiv}>\r\n                <CourseListing\r\n                    enterNewGame={enterNewGame}\r\n                    enter={c => pushToComponents(2, c)}\r\n                ></CourseListing>\r\n            </div>,\r\n        ],\r\n        [<Gameplay saveScore={saveScore}></Gameplay>],\r\n    ]\r\n\r\n    return componentToRender ? (\r\n        <div style={{ height: '100%' }}>\r\n            <button className='backButton' onClick={exit}>\r\n                back\r\n            </button>\r\n            {componentToRender[componentToRender.length - 1]}\r\n        </div>\r\n    ) : (\r\n        <div className={styles.Mainmenu}>\r\n            <h1>GolfCaddy</h1>\r\n            <div className={styles.mainMenuButtons}>\r\n                <button onClick={handleNewGame}>New game</button>\r\n                <button onClick={handleResumeGame}>Resume game</button>\r\n                <button onClick={() => setComponentToRender(components[1])}>\r\n                    Courses\r\n                </button>\r\n                <button onClick={() => setComponentToRender(components[0])}>\r\n                    Scorecards\r\n                </button>\r\n                <button onClick={() => logout()}>Logout</button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Mainmenu\r\n","import axios from 'axios'\r\n\r\nconst baseUrl = '/api/users/'\r\n\r\nconst create = course => {\r\n    const request = axios.post(baseUrl, course)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nconst users = { create }\r\nexport default users\r\n","/* Login.js hoitaa käyttöliittymän kirjautumisen*/\r\nimport { useState } from 'react'\r\nimport userServices from '../services/users.js'\r\nimport styles from '../styles/Login.module.css'\r\n/* login:in avulla voidaan kirjautua */\r\nconst Login = ({ login }) => {\r\n    // Kirjautumislomakkeen tiedot\r\n    const [username, setUsername] = useState('')\r\n    const [password, setPassword] = useState('')\r\n    const [confirmPassword, setConfirmPassword] = useState('')\r\n\r\n    // jos createNewAccountForm on true, näytetään käyttäjän luomislomakes\r\n    const [createNewAccountForm, setCreateNewAccountForm] = useState(false)\r\n    // Käyttäjän informoiminen\r\n    const [notification, setNotification] = useState('')\r\n    const [notificationStyle, setNotificationStyle] = useState('')\r\n    const [inputStyle, setInputStyle] = useState(styles.input)\r\n\r\n    // eri virheiden näyttämiseen\r\n    const error = e => {\r\n        setNotification(e)\r\n        setNotificationStyle(styles.error)\r\n        setInputStyle(styles.inputError)\r\n        setTimeout(() => {\r\n            setNotification('')\r\n            setNotificationStyle('')\r\n            setInputStyle(styles.input)\r\n        }, 2000)\r\n    }\r\n\r\n    // käsitellään kirjaantumispyyntö\r\n    const handleLogin = async event => {\r\n        event.preventDefault()\r\n        try {\r\n            await login({\r\n                username,\r\n                password,\r\n            })\r\n        } catch (e) {\r\n            error(e.response.data.error)\r\n        }\r\n    }\r\n\r\n    // Näytetäänkö käyttäjän lisäämislomake (vai kirjaantumislomake)\r\n    const handleShowCreateAccount = show => {\r\n        setUsername('')\r\n        setPassword('')\r\n        setCreateNewAccountForm(show)\r\n    }\r\n\r\n    /* Luodaan käyttäjä (jos nimi ei ole käytössä). Nollataan lomake */\r\n    const handleCreateAccount = async event => {\r\n        event.preventDefault()\r\n        if (password !== confirmPassword) {\r\n            error('Please confirm password')\r\n            return\r\n        }\r\n        try {\r\n            await userServices.create({\r\n                username: username,\r\n                password: password,\r\n            })\r\n            setUsername('')\r\n            setPassword('')\r\n            setCreateNewAccountForm(false)\r\n        } catch (e) {\r\n            error(e.response.data.error)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={styles.login}>\r\n            {createNewAccountForm ? (\r\n                <h2>Create new account</h2>\r\n            ) : (\r\n                <h2>Login</h2>\r\n            )}\r\n            <form\r\n                className={styles.form}\r\n                onSubmit={() =>\r\n                    createNewAccountForm\r\n                        ? { handleCreateAccount }\r\n                        : { handleLogin }\r\n                }\r\n            >\r\n                <div>\r\n                    <label htmlFor='username'></label>\r\n                    <input\r\n                        className={inputStyle}\r\n                        id='username'\r\n                        value={username}\r\n                        placeholder='username'\r\n                        onChange={({ target }) => setUsername(target.value)}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <label htmlFor='password'></label>\r\n                    <input\r\n                        type='password'\r\n                        className={inputStyle}\r\n                        id='password'\r\n                        placeholder='password'\r\n                        value={password}\r\n                        onChange={({ target }) => setPassword(target.value)}\r\n                    />\r\n                </div>\r\n                {createNewAccountForm ? (\r\n                    <div>\r\n                        <label htmlFor='confirmPassword'></label>\r\n                        <input\r\n                            type='password'\r\n                            className={inputStyle}\r\n                            id='confirmPassword'\r\n                            placeholder='confirm password'\r\n                            value={confirmPassword}\r\n                            onChange={({ target }) =>\r\n                                setConfirmPassword(target.value)\r\n                            }\r\n                        />\r\n                    </div>\r\n                ) : null}\r\n                <div className={styles.formButton}>\r\n                    {createNewAccountForm ? (\r\n                        <button onClick={handleCreateAccount}>create</button>\r\n                    ) : (\r\n                        <button onClick={handleLogin}>login</button>\r\n                    )}\r\n                </div>\r\n            </form>\r\n            <div className={notificationStyle}>{notification}</div>\r\n            <div className={styles.cancelButton}>\r\n                {createNewAccountForm ? (\r\n                    <button onClick={() => handleShowCreateAccount(false)}>\r\n                        cancel\r\n                    </button>\r\n                ) : (\r\n                    <button onClick={() => handleShowCreateAccount(true)}>\r\n                        create new account\r\n                    </button>\r\n                )}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Login\r\n","import axios from 'axios'\r\n\r\nconst baseUrl = '/api/login'\r\n\r\nconst login = async credentials => {\r\n    const response = await axios.post(baseUrl, credentials)\r\n    return response.data\r\n}\r\nconst loginService = { login }\r\nexport default loginService\r\n","/* App.js hoitaa käyttöliittymän kokonaisuudens*/\nimport { useState, useEffect } from 'react'\nimport Mainmenu from './components/Mainmenu'\nimport Login from './components/Login'\n\nimport loginService from './services/login'\nconst App = () => {\n    // tallennetaan käyttöliittymän tietoon käyttäjä\n    useEffect(() => {\n        setLoggedUser(JSON.parse(localStorage.getItem('loggedUser')))\n    }, [])\n    // Kirjautunut käyttäjä\n    const [loggedUser, setLoggedUser] = useState(null)\n    const login = async userInfo => {\n        const user = await loginService.login(userInfo)\n        setLoggedUser(user)\n        localStorage.setItem('loggedUser', JSON.stringify(user))\n    }\n    // Uloskirjautuessa nollataan käyttäjätiedot, sekä selaimen muisti\n    const logout = async () => {\n        setLoggedUser(null)\n        localStorage.clear()\n    }\n\n    const appContent = loggedUser ? (\n        <Mainmenu loggedUser={loggedUser} logout={logout}></Mainmenu>\n    ) : (\n        <Login login={login}></Login>\n    )\n\n    return <div className='App'>{appContent}</div>\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n)\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"NewCourse\":\"NewCourse_NewCourse__j8ZWs\",\"NewCourseInfo\":\"NewCourse_NewCourseInfo__2hqVU\",\"courseLengthInfo\":\"NewCourse_courseLengthInfo__Ii0Ga\",\"changeLengthButtons\":\"NewCourse_changeLengthButtons__2oV0N\",\"holeInfo\":\"NewCourse_holeInfo__2clcT\",\"holeList\":\"NewCourse_holeList__2PAAY\",\"holePar\":\"NewCourse_holePar__391dk\",\"changeParButtons\":\"NewCourse_changeParButtons__1_Y-C\",\"saveNewCourse\":\"NewCourse_saveNewCourse__aVb5a\",\"Scorecards\":\"NewCourse_Scorecards__2wPz2\",\"scorecardListingDiv\":\"NewCourse_scorecardListingDiv__25-EL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"gamePlayDiv\":\"Gameplay_gamePlayDiv__2bFZR\",\"holeScoreDiv\":\"Gameplay_holeScoreDiv__1L8Ej\",\"currentHoleScore\":\"Gameplay_currentHoleScore__2htgR\",\"holeInformationDiv\":\"Gameplay_holeInformationDiv__2tYEV\",\"finishRound\":\"Gameplay_finishRound__2gTIV\",\"holeDiv\":\"Gameplay_holeDiv__3twNw\",\"holeList\":\"Gameplay_holeList__Uv24h\",\"selectedHole\":\"Gameplay_selectedHole__3J8oK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"login\":\"Login_login__1IW4X\",\"input\":\"Login_input__1waPm\",\"inputError\":\"Login_inputError__249Ib\",\"error\":\"Login_error__39anN\",\"form\":\"Login_form__1ERcF\",\"formButton\":\"Login_formButton__10kxP\",\"cancelButton\":\"Login_cancelButton__2EslC\"};"],"sourceRoot":""}