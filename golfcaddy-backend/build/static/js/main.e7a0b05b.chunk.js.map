{"version":3,"sources":["styles/CourseListing.module.css","styles/Mainmenu.module.css","styles/Scorecard.module.css","styles/Scorecards.module.css","functions.js","components/Scorecard.js","components/Scorecards.js","components/NewCourse.js","services/courses.js","components/CourseListing.js","components/Gameplay.js","services/rounds.js","components/Mainmenu.js","services/users.js","components/Login.js","services/login.js","App.js","index.js","styles/NewCourse.module.css","styles/Login.module.css","styles/Gameplay.module.css"],"names":["module","exports","formalizeRelativeScore","score","functions","countRelativeScore","playerScore","coursePars","reduce","a","b","index","par","countTotalScore","countFormalRelativeScore","countPar","scorecard","totalPar","map","course","pars","formaliziteDate","dateToFormalizite","dateAndTime","split","date","time","h","parseInt","m","s","countCoursePar","Scorecard","deleteScorecard","className","styles","name","onClick","i","scorecardRow","Scorecards","enter","rounds","deleteRound","useState","sortedRounds","setSortedRounds","isSortedByDate","setIsSortedByDate","handleClickRound","r","useEffect","sortByDate","sort","dateA","dateB","_id","nameA","toUpperCase","nameB","sortByCourse","scorecardListingDiv","roundInfo","player","NewCourse","addCourse","editCourse","courseLength","setCourseLength","courseName","setCourseName","holePars","setHolePars","p","length","handleLengthChange","newLength","newPars","push","splice","handleParChange","hole","change","NewCourseInfo","htmlFor","type","id","value","onChange","target","courseLengthInfo","changeLengthButtons","holeList","holeInfo","holePar","changeParButtons","saveNewCourse","baseUrl","courses","getAll","axios","get","then","response","data","create","post","update","put","CourseListing","enterNewGame","setCourses","filter","setFilter","selectedCourse","setSelectedCourse","coursesService","handleAddNewCourse","newCourse","concat","document","getElementsByClassName","click","handleEditCourse","editedCourse","Object","assign","c","Courses","placeholder","courseListingDiv","toLocaleLowerCase","includes","style","backgroundColor","handleCourseClick","startNewGameButton","localStorage","setItem","JSON","stringify","Date","addNewCourseButton","Gameplay","saveScore","currentHole","setCurrentHole","setPlayerScore","setCourse","currentCourse","parse","getItem","currentScore","savedHole","changeScore","newScore","strokes","gamePlayDiv","holeScoreDiv","currentHoleScore","holeInformationDiv","holeDiv","selectedHole","getToken","headers","Authorization","token","round","remove","delete","Mainmenu","loggedUser","logout","setRounds","roundsService","componentToRender","setComponentToRender","exit","newComponentToRender","slice","pushToComponents","newComponent","components","newRound","removeItem","window","confirm","newRounds","subMenuDiv","handleNewGame","height","mainMenuButtons","users","Login","login","username","setUsername","password","setPassword","confirmPassword","setConfirmPassword","createNewAccountForm","setCreateNewAccountForm","notification","setNotification","input","inputStyle","setInputStyle","error","e","inputError","setTimeout","handleLogin","event","preventDefault","handleShowCreateAccount","show","handleCreateAccount","userServices","form","onSubmit","formButton","cancelButton","loginService","credentials","App","setLoggedUser","userInfo","user","clear","appContent","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.e7a0b05b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Courses\":\"CourseListing_Courses__M5Hbc\",\"courseListingDiv\":\"CourseListing_courseListingDiv__3vSUX\",\"course\":\"CourseListing_course__2dUAq\",\"startNewGameButton\":\"CourseListing_startNewGameButton__11Kk8\",\"addNewCourseButton\":\"CourseListing_addNewCourseButton__ZuEVa\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Mainmenu\":\"Mainmenu_Mainmenu__2pnje\",\"mainMenuButtons\":\"Mainmenu_mainMenuButtons__3jUfN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"scorecard\":\"Scorecard_scorecard__2ym_o\",\"scorecardRow\":\"Scorecard_scorecardRow__3oiej\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Scorecards\":\"Scorecards_Scorecards___Fk7C\",\"scorecardListingDiv\":\"Scorecards_scorecardListingDiv__1M3vt\"};","// Lasketaan suhteellinen tulos pelatuille väylille\r\nconst countRelativeScore = (playerScore, coursePars) => {\r\n    return playerScore.reduce((a, b, index) => {\r\n        if (!b) return a\r\n        return a + b - coursePars[index].par\r\n    }, 0)\r\n}\r\n\r\n// Lasketaan suhteellinen tulos pelatuille väylille nätissä muodossa\r\nconst countFormalRelativeScore = (playerScore, coursePars) => {\r\n    return formalizeRelativeScore(\r\n        playerScore.reduce((a, b, index) => {\r\n            if (!b) return a\r\n            return a + b - coursePars[index].par\r\n        }, 0)\r\n    )\r\n}\r\n\r\n// Muuta nätimpään muotoon suhteellinen tulos\r\nconst formalizeRelativeScore = score => {\r\n    /* Jos tulos on tasan par:issa näytetään E, muutoin etumerkin kanssa luku itse */\r\n    if (score === 0) return 'E'\r\n    if (score > 0) return '+' + score\r\n    return score\r\n}\r\n\r\n// Lasketaan pelattujen väylien lyönnit yhteen\r\nconst countTotalScore = playerScore => {\r\n    return playerScore.reduce((a, b) => {\r\n        if (!b) return a\r\n        return a + b\r\n    }, 0)\r\n}\r\n\r\n// par \"keskeneräiselle\" kierrokselle\r\nconst countPar = scorecard => {\r\n    var totalPar = 0\r\n    scorecard.score.map((score, index) => {\r\n        if (score === null) return totalPar\r\n        return (totalPar += scorecard.course.pars[index].par)\r\n    })\r\n    return totalPar\r\n}\r\n\r\n// par radalle\r\nconst countCoursePar = scorecard => {\r\n    var totalPar = 0\r\n    scorecard.course.pars.map(par => {\r\n        return (totalPar += par.par)\r\n    })\r\n    return totalPar\r\n}\r\n\r\nconst formaliziteDate = dateToFormalizite => {\r\n    const dateAndTime = dateToFormalizite.split('T')\r\n    const date = dateAndTime[0].split('-')\r\n    const time = dateAndTime[1].split('.')[0].split(':')\r\n    const h = parseInt(time[0], 0) + 3\r\n    const m = time[1]\r\n    const s = time[2]\r\n    return date[2] + '/' + date[1] + '/' + date[0] + ' ' + h + ':' + m + ':' + s\r\n}\r\nconst functions = {\r\n    countRelativeScore,\r\n    formalizeRelativeScore,\r\n    countTotalScore,\r\n    countFormalRelativeScore,\r\n    countPar,\r\n    formaliziteDate,\r\n    countCoursePar,\r\n}\r\nexport default functions\r\n","/* Näyttää yhden pelatun kierroksen tiedot */\r\nimport styles from '../styles/Scorecard.module.css'\r\nimport functions /* { countTotalScore, countFormalRelativeScore } */ from '../functions.js'\r\nconst Scorecard = ({ scorecard, deleteScorecard }) => {\r\n    return scorecard ? (\r\n        <div className={styles.scorecard}>\r\n            <h2>\r\n                {scorecard.course.name}\r\n                <br></br>\r\n                {functions.formaliziteDate(scorecard.date)}\r\n            </h2>\r\n            <button onClick={deleteScorecard} className='rightTopCorner'>\r\n                Delete scorecard\r\n            </button>\r\n            <div>\r\n                <table>\r\n                    <thead>\r\n                        <tr>\r\n                            <th>Hole</th>\r\n                            <th>Par</th>\r\n                            <th>Strokes</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {scorecard.score.map((s, i) => (\r\n                            <tr className={styles.scorecardRow} key={i}>\r\n                                <td>{i + 1}</td>\r\n                                <td>{scorecard.course.pars[i].par}</td>\r\n                                <td>{s ? s : '-'}</td>\r\n                            </tr>\r\n                        ))}\r\n                        <tr className={styles.scorecardRow} key='total'>\r\n                            <td>\r\n                                <b>total</b>\r\n                            </td>\r\n                            <td>{`${functions.countPar(\r\n                                scorecard\r\n                            )}/${functions.countCoursePar(scorecard)}`}</td>\r\n                            <td>\r\n                                {functions.countTotalScore(scorecard.score)} (\r\n                                {functions.countFormalRelativeScore(\r\n                                    scorecard.score,\r\n                                    scorecard.course.pars\r\n                                )}\r\n                                )\r\n                            </td>\r\n                        </tr>\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n        </div>\r\n    ) : null\r\n}\r\n\r\nexport default Scorecard\r\n","/* Luo listauksen pelaajan pelaamista kierroksista */\r\nimport Scorecard from './Scorecard'\r\nimport { useEffect, useState } from 'react'\r\nimport styles from '../styles/Scorecards.module.css'\r\nimport functions from '../functions.js'\r\nconst Scorecards = ({ enter, rounds, deleteRound }) => {\r\n    const [sortedRounds, setSortedRounds] = useState([])\r\n    const [isSortedByDate, setIsSortedByDate] = useState(true)\r\n    const handleClickRound = async r => {\r\n        enter(\r\n            <Scorecard\r\n                scorecard={r}\r\n                deleteScorecard={() => deleteScorecard(r)}\r\n            ></Scorecard>\r\n        )\r\n    }\r\n\r\n    // Oletuksena kierrokset lajitellaan radan mukaan\r\n    useEffect(() => {\r\n        setSortedRounds(sortByDate(rounds))\r\n    }, [rounds])\r\n\r\n    // palauttaa kierrokset lajiteltuna radan mukaan\r\n    const sortByCourse = rounds => {\r\n        const roundsToSort = [...rounds]\r\n        return roundsToSort.sort((a, b) => {\r\n            var nameA = a.course.name.toUpperCase()\r\n            var nameB = b.course.name.toUpperCase()\r\n            if (nameA < nameB) {\r\n                return -1\r\n            }\r\n            if (nameA > nameB) {\r\n                return 1\r\n            }\r\n            return 0\r\n        })\r\n    }\r\n\r\n    // palauttaa kierrokset lajiteltuna päivämäärän mukaan\r\n    const sortByDate = rounds => {\r\n        const roundsToSort = [...rounds]\r\n        return roundsToSort.sort((a, b) => {\r\n            var dateA = a.date\r\n            var dateB = b.date\r\n            if (dateA < dateB) {\r\n                return 1\r\n            }\r\n            if (dateA > dateB) {\r\n                return -1\r\n            }\r\n            return 0\r\n        })\r\n    }\r\n\r\n    const deleteScorecard = scorecard => {\r\n        deleteRound(scorecard._id)\r\n    }\r\n\r\n    return (\r\n        <div className={styles.Scorecards}>\r\n            {isSortedByDate ? (\r\n                <button\r\n                    className='rightTopCorner'\r\n                    onClick={() => {\r\n                        setSortedRounds(sortByDate(rounds))\r\n                        setIsSortedByDate(!isSortedByDate)\r\n                    }}\r\n                >\r\n                    Sort by date\r\n                </button>\r\n            ) : (\r\n                <button\r\n                    className='rightTopCorner'\r\n                    onClick={() => {\r\n                        setSortedRounds(sortByCourse(rounds))\r\n                        setIsSortedByDate(!isSortedByDate)\r\n                    }}\r\n                >\r\n                    Sort by course\r\n                </button>\r\n            )}\r\n            <h1>Scorecards</h1>\r\n            <div className={styles.scorecardListingDiv}>\r\n                {sortedRounds.map(r => (\r\n                    <div\r\n                        key={r.date + r.player._id}\r\n                        onClick={() => handleClickRound(r)}\r\n                        className={styles.roundInfo}\r\n                    >\r\n                        {r.course.name}\r\n                        <br></br>\r\n                        {functions.formaliziteDate(r.date)}\r\n                    </div>\r\n                ))}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Scorecards\r\n","/* Radan lisäämislomake */\r\nimport { useEffect, useState } from 'react'\r\nimport styles from '../styles/NewCourse.module.css'\r\n\r\n/* addCourse aliohjleman avulla lisätään rata */\r\nconst NewCourse = ({ addCourse, name, pars, editCourse }) => {\r\n    // Radan pituus\r\n    const [courseLength, setCourseLength] = useState(18)\r\n    // radan nimi\r\n    const [courseName, setCourseName] = useState('')\r\n    // Radan par:it, oletuksena 3\r\n    const [holePars, setHolePars] = useState([\r\n        3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\r\n    ])\r\n    useEffect(() => {\r\n        // jos on annettu name, ollaan muokkaamassa rataa eikä luomassa uutta\r\n        if (name) {\r\n            setCourseName(name)\r\n            if (pars) {\r\n                setHolePars(pars.map(p => p.par))\r\n            }\r\n            setCourseLength(pars.length)\r\n        }\r\n    }, [pars, name])\r\n    // Muuttaessa radan pituutta, muuttuvat par:it\r\n    const handleLengthChange = newLength => {\r\n        if (newLength <= 0) return\r\n        if (newLength > courseLength) {\r\n            // Jos väyliä lisätään lisätään yhtä monta par:ia\r\n            const newPars = [...holePars]\r\n            for (var i = 0; i < newLength - courseLength; i++) {\r\n                newPars.push(3)\r\n            }\r\n            setHolePars(newPars)\r\n        } else {\r\n            // muutoin vähennettään par:eja yhtä moneen kuin väyliä on jäljellä\r\n            setHolePars(holePars.splice(0, newLength))\r\n        }\r\n        setCourseLength(newLength)\r\n    }\r\n\r\n    // Annetun väylän paria muutetaan\r\n    const handleParChange = (hole, change) => {\r\n        const newPars = holePars.map((p, i) =>\r\n            i + 1 === hole && p + change > 0 ? p + change : p\r\n        )\r\n        setHolePars(newPars)\r\n    }\r\n\r\n    // Tallennettaan annetut tiedot\r\n    const saveCourse = () => {\r\n        // Jos on on annettu nimi, ollaan muokkaamassa olemassa olevaa\r\n        if (!name) {\r\n            addCourse({\r\n                pars: holePars.map(p => {\r\n                    return { par: p }\r\n                }),\r\n                name: courseName,\r\n            })\r\n        } else {\r\n            editCourse({\r\n                pars: holePars.map(p => {\r\n                    return { par: p }\r\n                }),\r\n                name: courseName,\r\n            })\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={styles.NewCourse}>\r\n            <div className={styles.NewCourseInfo}>\r\n                <form>\r\n                    <label htmlFor='coursename'>Name</label>\r\n                    <input\r\n                        type='text'\r\n                        id='coursename'\r\n                        name='coursename'\r\n                        value={courseName}\r\n                        onChange={({ target }) => setCourseName(target.value)}\r\n                    ></input>\r\n                </form>\r\n\r\n                <div className={styles.courseLengthInfo}>\r\n                    <div>Number of holes: {courseLength}</div>\r\n                    <div className={styles.changeLengthButtons}>\r\n                        <button\r\n                            onClick={() => {\r\n                                handleLengthChange(18)\r\n                            }}\r\n                        >\r\n                            18\r\n                        </button>\r\n                        <button\r\n                            onClick={() => {\r\n                                handleLengthChange(9)\r\n                            }}\r\n                        >\r\n                            9\r\n                        </button>\r\n                        <button\r\n                            onClick={() => {\r\n                                handleLengthChange(courseLength - 1)\r\n                            }}\r\n                        >\r\n                            -\r\n                        </button>\r\n\r\n                        <button\r\n                            onClick={() => {\r\n                                handleLengthChange(courseLength + 1)\r\n                            }}\r\n                        >\r\n                            +\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n\r\n                <div className={styles.holeList}>\r\n                    {holePars.map((h, i) => {\r\n                        return (\r\n                            <div key={i} className={styles.holeInfo}>\r\n                                <div>Hole {1 + i} Par:</div>\r\n                                <div className={styles.holePar}>{h}</div>\r\n                                <div className={styles.changeParButtons}>\r\n                                    <button\r\n                                        onClick={() => {\r\n                                            handleParChange(1 + i, -1)\r\n                                        }}\r\n                                    >\r\n                                        -\r\n                                    </button>\r\n                                    <button\r\n                                        onClick={() => {\r\n                                            handleParChange(1 + i, 1)\r\n                                        }}\r\n                                    >\r\n                                        +\r\n                                    </button>\r\n                                </div>\r\n                            </div>\r\n                        )\r\n                    })}\r\n                </div>\r\n                <button className={styles.saveNewCourse} onClick={saveCourse}>\r\n                    Save\r\n                </button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default NewCourse\r\n","import axios from 'axios'\r\n\r\nconst baseUrl = '/api/courses/'\r\n\r\nconst getAll = () => {\r\n    const request = axios.get(baseUrl)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nconst get = id => {\r\n    const request = axios.get(`${baseUrl}/${id}`)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nconst create = course => {\r\n    const request = axios.post(baseUrl, course)\r\n    return request.then(response => response.data)\r\n}\r\nconst update = course => {\r\n    const request = axios.put(`${baseUrl}/${course._id}`, course)\r\n    return request.then(response => response.data)\r\n}\r\nconst courses = { getAll, create, get, update }\r\nexport default courses\r\n","/* Listaus radoista, ja mahdollisuus lisätä niitä käytetään pelkkään listaukseen ja myöhemmin muokkaamiseen\r\nsekä kierroksien aloittamiseen */\r\nimport { useEffect, useState } from 'react'\r\nimport NewCourse from './NewCourse' // NewCourse-komponentin avulla lisätään uusia ratoja ja muokataan vanhoja\r\nimport coursesService from '../services/courses' // courseservice hakee kaikki radat\r\nimport styles from '../styles/CourseListing.module.css' // Otetaan käyttöön tyyli tästä tiedostosta\r\n/* enterNewGame avulla siirryttään uuteen peliin, \r\njos enterNewGame on null, näytetään vain listausradoista ilman mahdollisuutta pelaamiseen\r\n\r\nenter avulla voidaan määrätä näytettäväksi radan lisäämislomake tai pelikierrostilanne\r\n*/\r\nconst CourseListing = ({ enterNewGame, enter }) => {\r\n    // Radat listattuna\r\n    const [courses, setCourses] = useState(null)\r\n    // näytetään vain radat joiden nimi sisältää merkkijonon\r\n    const [filter, setFilter] = useState('')\r\n    // käyttäjän täytyy valita, jokin rata ja sitten hyväksyä valinta, oletuksena ei mikään valittuna\r\n    const [selectedCourse, setSelectedCourse] = useState(null)\r\n    // Aluksi haetaan kaikki radat\r\n    useEffect(() => {\r\n        coursesService.getAll().then(courses =>\r\n            setCourses(\r\n                courses.sort((a, b) => {\r\n                    var nameA = a.name.toUpperCase()\r\n                    var nameB = b.name.toUpperCase()\r\n                    if (nameA < nameB) {\r\n                        return -1\r\n                    }\r\n                    if (nameA > nameB) {\r\n                        return 1\r\n                    }\r\n                    return 0\r\n                })\r\n            )\r\n        )\r\n    }, [])\r\n\r\n    // radan-lisäyksen klikkaamisen jälkeen näytetään lisäyslomake\r\n    const handleClickAddNewCourse = () => {\r\n        enter(\r\n            <NewCourse\r\n                addCourse={course => handleAddNewCourse(course)}\r\n            ></NewCourse>\r\n        )\r\n    }\r\n\r\n    // radan-muokkauksen klikkaamisen jälkeen näytetään muokkaamislomake\r\n    const handleClickEditCourse = () => {\r\n        enter(\r\n            <NewCourse\r\n                editCourse={course => handleEditCourse(course)}\r\n                name={selectedCourse.name}\r\n                pars={selectedCourse.pars}\r\n            ></NewCourse>\r\n        )\r\n    }\r\n\r\n    // Klikatessa radan nimeä.\r\n    const handleCourseClick = c => {\r\n        setSelectedCourse(c)\r\n    }\r\n\r\n    // Pelin aloittaminen\r\n    const startGame = () => {\r\n        if (enterNewGame) {\r\n            // Pelin alkaessa laitetaan talteen aloitusajankohta...\r\n            localStorage.setItem('startingTime', JSON.stringify(new Date()))\r\n            // sekä rata, jolla pelataan\r\n            localStorage.setItem(\r\n                'currentCourse',\r\n                JSON.stringify(selectedCourse)\r\n            )\r\n            enterNewGame()\r\n        }\r\n    }\r\n\r\n    // lisätään uusi rata, ja piilotetaan lisäyslomake\r\n    const handleAddNewCourse = async course => {\r\n        const newCourse = await coursesService.create(course)\r\n        /* lisäys myös käyttliittymän listaan */\r\n        setCourses(\r\n            courses.concat(newCourse).sort((a, b) => {\r\n                var nameA = a.name.toUpperCase()\r\n                var nameB = b.name.toUpperCase()\r\n                if (nameA < nameB) {\r\n                    return -1\r\n                }\r\n                if (nameA > nameB) {\r\n                    return 1\r\n                }\r\n                return 0\r\n            })\r\n        )\r\n        // poistutaan lisäyksen jälkeen lomakkeelta toistaiseksi näin\r\n        document.getElementsByClassName('backButton')[0].click()\r\n    }\r\n    // muokataan rataa, ja piilotetaan muokkauss\r\n    const handleEditCourse = async course => {\r\n        const editedCourse = Object.assign({ _id: selectedCourse._id }, course)\r\n        const newCourse = await coursesService.update(editedCourse)\r\n        /* poistetaan käyttliittymästä vanha ja lisätään uusi */\r\n        setCourses(courses.map(c => (c._id === newCourse._id ? newCourse : c)))\r\n        // poistutaan muokkauksen jälkeen lomakkeelta toistaiseksi näin\r\n        document.getElementsByClassName('backButton')[0].click()\r\n    }\r\n\r\n    // palautetaan eri button riippuen siitä, ollaanko \"New Game\"-osassa,\r\n    // vai \"Courses\"-osassa. Toisessa voidaan aloittaa uusi peli ja toisessa muokata ratojas\r\n    const courseButtons = () => {\r\n        return enterNewGame ? (\r\n            <button\r\n                className={styles.startNewGameButton}\r\n                onClick={() => startGame()}\r\n            >\r\n                Start Game\r\n            </button>\r\n        ) : (\r\n            <button\r\n                className={styles.startNewGameButton}\r\n                onClick={() => handleClickEditCourse()}\r\n            >\r\n                Edit Course\r\n            </button>\r\n        )\r\n    }\r\n\r\n    // Palautetaan listassa radat\r\n    const coursesMapped = () => {\r\n        return courses.map(c => {\r\n            if (\r\n                c.name.toLocaleLowerCase().includes(filter.toLocaleLowerCase())\r\n            ) {\r\n                return (\r\n                    <div\r\n                        style={\r\n                            // Jos kyseinen rata on valittu rata, laitetaan taustaksi harmaampi\r\n                            selectedCourse\r\n                                ? c.name === selectedCourse.name\r\n                                    ? { backgroundColor: '#B6B6B6' }\r\n                                    : null\r\n                                : null\r\n                        }\r\n                        className={styles.course}\r\n                        key={c.name}\r\n                        onClick={() => {\r\n                            handleCourseClick(c)\r\n                        }}\r\n                    >\r\n                        <span>{c.name}</span>\r\n                    </div>\r\n                )\r\n            }\r\n            return null\r\n        })\r\n    }\r\n    return (\r\n        <div className={styles.Courses}>\r\n            <input\r\n                className='rightTopCorner'\r\n                placeholder='filter'\r\n                value={filter}\r\n                onChange={({ target }) => setFilter(target.value)}\r\n            />\r\n            {\r\n                /* Otsikon valinta tilanteen mukaan */ enterNewGame ? (\r\n                    <h1>New Game</h1>\r\n                ) : (\r\n                    <h1>Courses</h1>\r\n                )\r\n            }\r\n            <div className={styles.courseListingDiv}>\r\n                {courses ? (\r\n                    coursesMapped()\r\n                ) : (\r\n                    <div className='lds-ring'>\r\n                        <div></div>\r\n                        <div></div>\r\n                        <div></div>\r\n                        <div></div>\r\n                    </div>\r\n                )}\r\n                {/*Lähde: https://loading.io/css/ CC0 Lisenssillä*/}\r\n            </div>\r\n\r\n            {selectedCourse ? courseButtons() : null}\r\n\r\n            <button\r\n                className={styles.addNewCourseButton}\r\n                onClick={() => handleClickAddNewCourse()}\r\n            >\r\n                Add New Course\r\n            </button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CourseListing\r\n","/* Gameplay-komponentti vastaa pelin aikaisesta pisteiden kirjanpidosta */\r\nimport { useState, useEffect } from 'react'\r\n\r\nimport styles from '../styles/Gameplay.module.css'\r\nimport functions from '../functions.js' // Muutama pisteiden laskuun liittyvä funktio on eristetty muualle\r\n/* \r\nsaveScore-funktion avulla tallennetaan käynnissä oleva kierros\r\n*/\r\nconst Gameplay = ({ saveScore }) => {\r\n    const [currentHole, setCurrentHole] = useState(1) // Pidetään tallessa millä väylällä ollaan\r\n    const [playerScore, setPlayerScore] = useState([]) // Pelaajan pisteet\r\n    const [course, setCourse] = useState(null) // rata, jolla ollaan\r\n\r\n    // Vain ekalla Gameplayn renderöinnillä\r\n    useEffect(() => {\r\n        // otetaan selaimen muistista valitturata\r\n        const currentCourse = JSON.parse(localStorage.getItem('currentCourse'))\r\n        setCourse(currentCourse)\r\n        // Selaimen muistista pisteet, jos esim ollaan poistuttu pelistä, ja palataan\r\n        const currentScore = JSON.parse(localStorage.getItem('currentScore'))\r\n        if (currentScore) {\r\n            // Jos kierrokselta on jo pisteet olemassa käytetään niitä\r\n            setPlayerScore(currentScore)\r\n            // Jos ollaan jo jollain väylällä jatketaan siitä, muutoin väylältä 1\r\n            const savedHole = parseInt(localStorage.getItem('currentHole'), 10)\r\n            savedHole ? setCurrentHole(savedHole) : setCurrentHole(1)\r\n            return\r\n        }\r\n        // Jos pisteitä ei ole asetetaan kaikille null\r\n        setPlayerScore(currentCourse.pars.map(() => null))\r\n    }, [])\r\n\r\n    // Aina pelajaan pisteiden päivittyessä\r\n    useEffect(() => {\r\n        // Päivitetään selaimen muistiin pisteet, jotta voidaan jatkaa vaikka poistuttaisiin\r\n        localStorage.setItem('currentScore', JSON.stringify(playerScore))\r\n    }, [playerScore])\r\n\r\n    /* Pelaajan väylän pisteiden muuttamiseen */\r\n    const handleIncreaseScore = () => {\r\n        changeScore(1)\r\n    }\r\n    const handleDecreaseScore = () => {\r\n        changeScore(-1)\r\n    }\r\n    const changeScore = change => {\r\n        // Jos uusi tulos on 0, poistutaan\r\n        if (playerScore[currentHole - 1] === 1 && change < 0) return\r\n        // Luodaan uusi pistetaulukko, map-funktiossa jos indeksi on sama kuin\r\n        // tämän hetkinen väylä, muutetaan sitä.\r\n        const newScore = playerScore.map((strokes, i) => {\r\n            if (i !== currentHole - 1) return strokes\r\n            // jos väylällä on olemassa tulos, muutetaan, muutoin asetetaan väylän tulokseksi par\r\n            return strokes ? strokes + change : course.pars[currentHole - 1].par\r\n        })\r\n        setPlayerScore(newScore)\r\n    }\r\n\r\n    // Kierroksen lopetus\r\n    const handleFinishRound = () => {\r\n        saveScore(course, playerScore)\r\n    }\r\n\r\n    return course ? (\r\n        <div className={styles.gamePlayDiv}>\r\n            <button className='rightTopCorner' onClick={handleFinishRound}>\r\n                finish round\r\n            </button>\r\n            <h2>{course.name}</h2>\r\n            <div className={styles.holeScoreDiv}>\r\n                <button onClick={handleDecreaseScore}>-</button>\r\n                <div className={styles.currentHoleScore}>\r\n                    {playerScore[currentHole - 1]\r\n                        ? playerScore[currentHole - 1]\r\n                        : '-'}\r\n                </div>\r\n                <button onClick={handleIncreaseScore}>+</button>\r\n            </div>\r\n            <div className={styles.holeInformationDiv}>\r\n                <div className={styles.holeDiv}>\r\n                    Hole: <span>{currentHole}</span>\r\n                </div>\r\n                <div>Par: {course.pars[currentHole - 1].par}</div>\r\n                <div>\r\n                    Score: {functions.countTotalScore(playerScore)} (\r\n                    {functions.countFormalRelativeScore(\r\n                        playerScore,\r\n                        course.pars\r\n                    )}\r\n                    )\r\n                </div>\r\n            </div>\r\n            <div className={styles.holeList}>\r\n                {course.pars.map((p, i) => {\r\n                    return (\r\n                        <div\r\n                            key={i}\r\n                            className={\r\n                                currentHole === i + 1 ? styles.selectedHole : ''\r\n                            }\r\n                            onClick={() => setCurrentHole(i + 1)}\r\n                        >\r\n                            <p>{i + 1}</p>\r\n                        </div>\r\n                    )\r\n                })}\r\n            </div>\r\n        </div>\r\n    ) : null\r\n}\r\n\r\nexport default Gameplay\r\n","import axios from 'axios'\r\n\r\nconst baseUrl = '/api/rounds/'\r\nconst getToken = () => {\r\n    return {\r\n        headers: {\r\n            Authorization: `bearer ${\r\n                JSON.parse(localStorage.getItem('loggedUser')).token\r\n            }`,\r\n        },\r\n    }\r\n}\r\n// Palauttaa id:tä vastaavaan käyttäjän kierrokset\r\nconst get = id => {\r\n    const request = axios.get(`${baseUrl}/user/${id}`, getToken())\r\n    return request.then(response => {\r\n        return response.data\r\n    })\r\n}\r\n\r\n/* const getAll = () => {\r\n    const request = axios.get(baseUrl)\r\n    return request.then(response => {\r\n        return response.data\r\n    })\r\n} */\r\n\r\nconst create = round => {\r\n    const request = axios.post(baseUrl, round, getToken())\r\n    return request.then(response => response.data)\r\n}\r\nconst remove = id => {\r\n    const request = axios.delete(`${baseUrl}/${id}`, getToken())\r\n    return request.then(response => response.data)\r\n}\r\nconst rounds = { create, get, remove }\r\nexport default rounds\r\n","/* Päävalikko, hoitaa eri alivalikoiden näyttämisen */\r\nimport Scorecards from './Scorecards'\r\nimport Scorecard from './Scorecard'\r\nimport CourseListing from './CourseListing'\r\nimport Gameplay from './Gameplay'\r\nimport { useState, useEffect } from 'react'\r\nimport roundsService from '../services/rounds'\r\nimport styles from '../styles/Mainmenu.module.css'\r\n\r\n// loggedUser on kirjautunut käyttäjä, logout avulla kirjataan ulos\r\nconst Mainmenu = ({ loggedUser, logout }) => {\r\n    // Kaikki kirjautuneen pelaajan pelatut kierrokset listassa\r\n    const [rounds, setRounds] = useState([])\r\n    // Kirjaantuneen käyttäjän vaihtuessa päivitetään kierrokset-lista\r\n    useEffect(() => {\r\n        roundsService.get(loggedUser._id).then(rounds => setRounds(rounds))\r\n    }, [loggedUser])\r\n\r\n    /* componentToRender:in viimeinen alkio on näytettävä komponentti\r\n    Jos se on null, näytettään main menu */\r\n    const [componentToRender, setComponentToRender] = useState(null)\r\n\r\n    // Poistutaan tämän hetkisestä näkymästä ja palataan \"edelliseen\"\r\n    const exit = () => {\r\n        // Jos pituus on enemmän kuin 1 joku muu kuin Main Menu on edellinen\r\n        if (componentToRender && componentToRender.length > 1) {\r\n            /* componentToRender.slice(0, -1) palauttaa componentToRender-taulukon ilman viimeistö alkiota */\r\n            const newComponentToRender = componentToRender.slice(0, -1)\r\n            setComponentToRender(newComponentToRender)\r\n            return\r\n        }\r\n        setComponentToRender(null)\r\n    }\r\n\r\n    // mennään \"syvemmälle\" valikoissa\r\n    const pushToComponents = (index, newComponent) => {\r\n        setComponentToRender([...components[index], newComponent])\r\n    }\r\n\r\n    // Tallenetaan annettujen tietojen perusteella scorecard\r\n    const saveScore = async (course, score) => {\r\n        const scorecard = {\r\n            date: JSON.parse(localStorage.getItem('startingTime')),\r\n            player: loggedUser._id,\r\n            course: course,\r\n            score: score,\r\n        }\r\n        const newRound = await roundsService.create(scorecard)\r\n        setRounds(rounds.concat(newRound))\r\n        /* scorecardin tallentamisen jälkeen poistutaan pelikierrosnäkymästä\r\n        eli palataan Main Menu näkymään */\r\n        exit()\r\n        /* Mutta asetetaan päälle pelikierroksen tietojen näyttäminen,\r\n        jotta \"palatessa\" mennään MainMenuun*/\r\n        setComponentToRender([\r\n            <Scorecard\r\n                scorecard={newRound}\r\n                deleteScorecard={() => deleteRound(newRound._id)}\r\n            ></Scorecard>,\r\n        ])\r\n        /* Poistetaan käynnissä olleen kierroksen tiedot selaimen muistista */\r\n        localStorage.removeItem('currentCourse')\r\n        localStorage.removeItem('currentScore')\r\n        localStorage.removeItem('startingTime')\r\n        localStorage.removeItem('currentHole')\r\n    }\r\n\r\n    const handleResumeGame = () => {\r\n        /* Jos selaimen muistissa ei ole kierrosta, kysytään aloitetaanko uusi */\r\n        if (JSON.parse(localStorage.getItem('currentScore'))) {\r\n            setComponentToRender(components[3])\r\n            return\r\n        }\r\n\r\n        if (window.confirm('no current round, start new?')) {\r\n            handleNewGame()\r\n        }\r\n    }\r\n\r\n    const enterNewGame = () => {\r\n        setComponentToRender(components[3])\r\n    }\r\n\r\n    const deleteRound = async id => {\r\n        if (!window.confirm('Delete this scorecard?')) {\r\n            return\r\n        }\r\n        await roundsService.remove(id)\r\n        const newRounds = rounds.filter(r => r._id !== id)\r\n        setRounds(newRounds)\r\n        exit()\r\n        setComponentToRender([\r\n            <div className={styles.subMenuDiv}>\r\n                <Scorecards\r\n                    rounds={newRounds}\r\n                    enter={c => pushToComponents(0, c)}\r\n                    deleteRound={deleteRound}\r\n                ></Scorecards>\r\n            </div>,\r\n        ])\r\n    }\r\n\r\n    const handleNewGame = async () => {\r\n        /* Jos selaimen muistissa on kierros, varmistetaan halutaanko uusi aloittaa */\r\n        if (JSON.parse(localStorage.getItem('currentScore'))) {\r\n            if (window.confirm('Start new round? Current one will be saved.')) {\r\n                const scorecard = {\r\n                    date: JSON.parse(localStorage.getItem('startingTime')),\r\n                    player: loggedUser._id,\r\n                    course: JSON.parse(localStorage.getItem('currentCourse')),\r\n                    score: JSON.parse(localStorage.getItem('currentScore')),\r\n                }\r\n                const newRound = await roundsService.create(scorecard)\r\n                setRounds(rounds.concat(newRound))\r\n                localStorage.removeItem('currentScore')\r\n                localStorage.removeItem('currentCourse')\r\n                localStorage.removeItem('startingTime')\r\n                localStorage.removeItem('currentHole')\r\n                setComponentToRender(components[2])\r\n            }\r\n            return\r\n        }\r\n        setComponentToRender(components[2])\r\n    }\r\n\r\n    /* Lista listoista, jos yksikään listan komponenttilistoista\r\n    ei ole valittuna, renderöidään päävalikko. Jos jokin on valittuna\r\n    renderöidään kyseisen listan viimeinen alkio.    \r\n    */\r\n    const components = [\r\n        [\r\n            <div className={styles.subMenuDiv}>\r\n                <Scorecards\r\n                    rounds={rounds}\r\n                    enter={c => pushToComponents(0, c)}\r\n                    deleteRound={deleteRound}\r\n                ></Scorecards>\r\n            </div>,\r\n        ],\r\n        [\r\n            <div className={styles.subMenuDiv}>\r\n                <CourseListing\r\n                    enterNewGame={null}\r\n                    enter={c => pushToComponents(1, c)}\r\n                ></CourseListing>\r\n            </div>,\r\n        ],\r\n        [\r\n            <div className={styles.subMenuDiv}>\r\n                <CourseListing\r\n                    enterNewGame={enterNewGame}\r\n                    enter={c => pushToComponents(2, c)}\r\n                ></CourseListing>\r\n            </div>,\r\n        ],\r\n        [<Gameplay saveScore={saveScore}></Gameplay>],\r\n    ]\r\n\r\n    return componentToRender ? (\r\n        <div style={{ height: '100%' }}>\r\n            <button className='backButton' onClick={exit}>\r\n                back\r\n            </button>\r\n            {componentToRender[componentToRender.length - 1]}\r\n        </div>\r\n    ) : (\r\n        <div className={styles.Mainmenu}>\r\n            <h1>GolfCaddy</h1>\r\n            <div className={styles.mainMenuButtons}>\r\n                <button onClick={handleNewGame}>New game</button>\r\n                <button onClick={handleResumeGame}>Resume game</button>\r\n                <button onClick={() => setComponentToRender(components[1])}>\r\n                    Courses\r\n                </button>\r\n                <button onClick={() => setComponentToRender(components[0])}>\r\n                    Scorecards\r\n                </button>\r\n                <button onClick={() => logout()}>Logout</button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Mainmenu\r\n","import axios from 'axios'\r\n\r\nconst baseUrl = '/api/users/'\r\n\r\nconst create = course => {\r\n    const request = axios.post(baseUrl, course)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nconst users = { create }\r\nexport default users\r\n","/* Login.js hoitaa käyttöliittymän kirjautumisen*/\r\nimport { useState } from 'react'\r\nimport userServices from '../services/users.js'\r\nimport styles from '../styles/Login.module.css'\r\n/* login:in avulla voidaan kirjautua */\r\nconst Login = ({ login }) => {\r\n    // Kirjautumislomakkeen tiedot\r\n    const [username, setUsername] = useState('')\r\n    const [password, setPassword] = useState('')\r\n    const [confirmPassword, setConfirmPassword] = useState('')\r\n\r\n    // jos createNewAccountForm on true, näytetään käyttäjän luomislomakes\r\n    const [createNewAccountForm, setCreateNewAccountForm] = useState(false)\r\n    // Käyttäjän informoiminen\r\n    const [notification, setNotification] = useState('')\r\n    const [inputStyle, setInputStyle] = useState(styles.input)\r\n\r\n    // eri virheiden näyttämiseen\r\n    const error = e => {\r\n        setNotification(e)\r\n        setInputStyle(styles.inputError)\r\n        setTimeout(() => {\r\n            setNotification('')\r\n            setInputStyle(styles.input)\r\n        }, 2000)\r\n    }\r\n\r\n    // käsitellään kirjaantumispyyntö\r\n    const handleLogin = async event => {\r\n        event.preventDefault()\r\n        try {\r\n            await login({\r\n                username,\r\n                password,\r\n            })\r\n        } catch (e) {\r\n            error(e.response.data.error)\r\n        }\r\n    }\r\n\r\n    // Näytetäänkö käyttäjän lisäämislomake (vai kirjaantumislomake)\r\n    const handleShowCreateAccount = show => {\r\n        setUsername('')\r\n        setPassword('')\r\n        setCreateNewAccountForm(show)\r\n    }\r\n\r\n    /* Luodaan käyttäjä (jos nimi ei ole käytössä). Nollataan lomake */\r\n    const handleCreateAccount = async event => {\r\n        event.preventDefault()\r\n        if (password !== confirmPassword) {\r\n            error('Please confirm password')\r\n            return\r\n        }\r\n        try {\r\n            await userServices.create({\r\n                username: username,\r\n                password: password,\r\n            })\r\n            setUsername('')\r\n            setPassword('')\r\n            setCreateNewAccountForm(false)\r\n        } catch (e) {\r\n            error(e.response.data.error)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={styles.login}>\r\n            {createNewAccountForm ? <h2>New account</h2> : <h2>Login</h2>}\r\n            <form\r\n                className={styles.form}\r\n                onSubmit={() =>\r\n                    createNewAccountForm\r\n                        ? { handleCreateAccount }\r\n                        : { handleLogin }\r\n                }\r\n            >\r\n                <div>\r\n                    <label htmlFor='username'></label>\r\n                    <input\r\n                        className={inputStyle}\r\n                        id='username'\r\n                        value={username}\r\n                        placeholder='username'\r\n                        onChange={({ target }) => setUsername(target.value)}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <label htmlFor='password'></label>\r\n                    <input\r\n                        type='password'\r\n                        className={inputStyle}\r\n                        id='password'\r\n                        placeholder='password'\r\n                        value={password}\r\n                        onChange={({ target }) => setPassword(target.value)}\r\n                    />\r\n                </div>\r\n                {createNewAccountForm ? (\r\n                    <div>\r\n                        <label htmlFor='confirmPassword'></label>\r\n                        <input\r\n                            type='password'\r\n                            className={inputStyle}\r\n                            id='confirmPassword'\r\n                            placeholder='confirm password'\r\n                            value={confirmPassword}\r\n                            onChange={({ target }) =>\r\n                                setConfirmPassword(target.value)\r\n                            }\r\n                        />\r\n                    </div>\r\n                ) : null}\r\n                <div className={styles.formButton}>\r\n                    {createNewAccountForm ? (\r\n                        <button onClick={handleCreateAccount}>create</button>\r\n                    ) : (\r\n                        <button onClick={handleLogin}>login</button>\r\n                    )}\r\n                </div>\r\n            </form>\r\n            <div className={styles.error}>{notification}</div>\r\n            <div className={styles.cancelButton}>\r\n                {createNewAccountForm ? (\r\n                    <button onClick={() => handleShowCreateAccount(false)}>\r\n                        cancel\r\n                    </button>\r\n                ) : (\r\n                    <button onClick={() => handleShowCreateAccount(true)}>\r\n                        create new account\r\n                    </button>\r\n                )}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Login\r\n","import axios from 'axios'\r\n\r\nconst baseUrl = '/api/login'\r\n\r\nconst login = async credentials => {\r\n    const response = await axios.post(baseUrl, credentials)\r\n    return response.data\r\n}\r\nconst loginService = { login }\r\nexport default loginService\r\n","/* App.js hoitaa käyttöliittymän kokonaisuudens*/\r\nimport { useState, useEffect } from 'react'\r\nimport Mainmenu from './components/Mainmenu'\r\nimport Login from './components/Login'\r\n\r\nimport loginService from './services/login'\r\nconst App = () => {\r\n    // tallennetaan käyttöliittymän tietoon käyttäjä\r\n    useEffect(() => {\r\n        setLoggedUser(JSON.parse(localStorage.getItem('loggedUser')))\r\n    }, [])\r\n    // Kirjautunut käyttäjä\r\n    const [loggedUser, setLoggedUser] = useState(null)\r\n    const login = async userInfo => {\r\n        const user = await loginService.login(userInfo)\r\n        setLoggedUser(user)\r\n        localStorage.setItem('loggedUser', JSON.stringify(user))\r\n    }\r\n    // Uloskirjautuessa nollataan käyttäjätiedot, sekä selaimen muisti\r\n    const logout = async () => {\r\n        setLoggedUser(null)\r\n        localStorage.clear()\r\n    }\r\n\r\n    const appContent = loggedUser ? (\r\n        <Mainmenu loggedUser={loggedUser} logout={logout}></Mainmenu>\r\n    ) : (\r\n        <Login login={login}></Login>\r\n    )\r\n\r\n    return <div className='App'>{appContent}</div>\r\n}\r\n\r\nexport default App\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport App from './App'\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <App />\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n)\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"NewCourse\":\"NewCourse_NewCourse__3gjhH\",\"NewCourseInfo\":\"NewCourse_NewCourseInfo__3JhUb\",\"courseLengthInfo\":\"NewCourse_courseLengthInfo__3_lei\",\"changeLengthButtons\":\"NewCourse_changeLengthButtons__2ESms\",\"holeInfo\":\"NewCourse_holeInfo__35-7u\",\"holeList\":\"NewCourse_holeList__5ZIjd\",\"holePar\":\"NewCourse_holePar__3tM92\",\"changeParButtons\":\"NewCourse_changeParButtons__3gLCk\",\"saveNewCourse\":\"NewCourse_saveNewCourse__2Cxfg\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"login\":\"Login_login__394BC\",\"input\":\"Login_input__2s62w\",\"inputError\":\"Login_inputError__13Y22\",\"error\":\"Login_error__3T5Om\",\"form\":\"Login_form__wKW8J\",\"formButton\":\"Login_formButton__3kEwJ\",\"cancelButton\":\"Login_cancelButton__1mR_P\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"gamePlayDiv\":\"Gameplay_gamePlayDiv__1JkKH\",\"holeScoreDiv\":\"Gameplay_holeScoreDiv__1-OIi\",\"currentHoleScore\":\"Gameplay_currentHoleScore__13cQL\",\"holeInformationDiv\":\"Gameplay_holeInformationDiv__2y3Ad\",\"finishRound\":\"Gameplay_finishRound__389Ys\",\"holeDiv\":\"Gameplay_holeDiv__1lIPp\",\"holeList\":\"Gameplay_holeList__31blQ\",\"selectedHole\":\"Gameplay_selectedHole__2dBGe\"};"],"sourceRoot":""}